import { keys } from 'immuton';
import BaseSerializer from './BaseSerializer.js';
export default class OptionalSerializer extends BaseSerializer {
    requiredFields;
    fields;
    constructor(requiredFields, fields) {
        super();
        this.requiredFields = requiredFields;
        this.fields = fields;
    }
    extend(fields) {
        const { requiredFields } = this;
        const additionalKeys = keys(fields);
        return new OptionalSerializer([...requiredFields, ...additionalKeys], {
            ...this.fields,
            ...fields,
        });
    }
    transformFieldWith(field, value, key, callback) {
        const { requiredFields } = this;
        // Optional undefined field value is omitted
        if (!requiredFields.includes(key) && typeof value === 'undefined') {
            return undefined;
        }
        // Otherwise (de)serialize normally
        return super.transformFieldWith(field, value, key, callback);
    }
}
