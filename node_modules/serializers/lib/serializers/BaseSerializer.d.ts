import type Field from '../fields/Field.js';
import type Encoding from './Encoding.js';
import type FieldConverter from './FieldConverter.js';
import type Fields from './Fields.js';
import type Serialization from './Serialization.js';
import type Serializer from './Serializer.js';
declare abstract class BaseSerializer<T> implements Serializer<T> {
    readonly type: string;
    protected abstract readonly fields: Fields<T>;
    serialize(input: T): Serialization;
    encodeFields(input: T): Encoding;
    validate(input: T): T;
    deserialize(input: unknown): T;
    decodeFields(input: Encoding): T;
    encode(value: T): string;
    decode(value: string): T;
    protected transformFieldWith<Value>(field: Field<any>, value: any, key: any, callback: FieldConverter<Value>): any;
    private transformWith;
}
export default BaseSerializer;
