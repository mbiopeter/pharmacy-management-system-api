import { Require } from 'immuton';
import type Field from '../fields/Field.js';
import BaseSerializer from './BaseSerializer.js';
import type ExtendableSerializer from './ExtendableSerializer.js';
import type FieldConverter from './FieldConverter.js';
import type Fields from './Fields.js';
export default class OptionalSerializer<Data, Required extends keyof Data> extends BaseSerializer<Require<Data, Required>> implements ExtendableSerializer<Require<Data, Required>> {
    private readonly requiredFields;
    protected fields: Fields<Data>;
    constructor(requiredFields: Required[], fields: Fields<Data>);
    extend<Extra>(fields: Fields<Extra>): OptionalSerializer<Data & Extra, Required | keyof Extra>;
    protected transformFieldWith<Value>(field: Field<any>, value: any, key: any, callback: FieldConverter<Value>): any;
}
