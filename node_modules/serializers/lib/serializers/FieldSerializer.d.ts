import { Key, Optional, Require } from 'immuton';
import BaseSerializer from './BaseSerializer.js';
import type ExtendableSerializer from './ExtendableSerializer.js';
import type Fields from './Fields.js';
export default class FieldSerializer<T> extends BaseSerializer<T> implements ExtendableSerializer<T> {
    readonly fields: Fields<T>;
    constructor(fields: Fields<T>);
    pick<K extends Key<T> & Key<Fields<T>>>(attrs: K[]): FieldSerializer<Pick<T, K>>;
    omit<K extends Key<T>>(attrs: K[]): FieldSerializer<Omit<T, K>>;
    require<K extends Key<T>>(required: K[]): ExtendableSerializer<Require<T, K>>;
    optional<K extends Key<T>>(optional: K[]): ExtendableSerializer<Optional<T, K>>;
    partial(): ExtendableSerializer<Partial<T>>;
    extend<E>(fields: Fields<E>): FieldSerializer<T & E>;
}
