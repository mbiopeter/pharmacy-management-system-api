import ValidationException from '../errors/ValidationException.js';
function ensureString(value) {
    if (typeof value === 'string') {
        return value;
    }
    throw new ValidationException('invalidString', `Invalid string value`);
}
export default class StringField {
    type = 'text';
    trim;
    minLength;
    maxLength;
    constructor(options) {
        this.minLength = options?.minLength ?? 0;
        this.maxLength = options?.maxLength ?? null;
        this.trim = options?.trim ?? false;
    }
    validate(value) {
        return this.validateString(ensureString(value));
    }
    deserialize(value) {
        if (typeof value === 'number' && Number.isFinite(value)) {
            return this.validateString(String(value));
        }
        return this.validateString(ensureString(value));
    }
    serialize(value) {
        return this.validateString(ensureString(value));
    }
    encode(value) {
        return this.validateString(ensureString(value));
    }
    decode(value) {
        return this.validateString(value);
    }
    validateString(value) {
        const { minLength, maxLength, trim } = this;
        const str = trim ? value.trim() : value;
        if (str.length < minLength) {
            throw new ValidationException('tooShort', minLength === 1 ? 'Value may not be blank' : `Value may not be shorter than ${minLength} characters`);
        }
        if (maxLength != null && str.length > maxLength) {
            throw new ValidationException('tooLong', `Value may not be longer than ${maxLength} ${maxLength === 1 ? 'character' : 'characters'}`);
        }
        return str;
    }
}
