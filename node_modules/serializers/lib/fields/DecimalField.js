/* eslint-disable no-param-reassign */
import ValidationException from '../errors/ValidationException.js';
import RegexpField from './RegexpField.js';
const decimalRegexp = /^\s*[+-]?\d+(?:\.\d+)?\s*$/;
const MIN_DECIMALS = -20;
const MAX_DECIMALS = 20;
export default class DecimalField extends RegexpField {
    decimals;
    type = 'numeric';
    constructor(decimals) {
        super(decimalRegexp, 'invalidDecimal', 'Invalid decimal string');
        this.decimals = decimals;
        if (typeof decimals !== 'number' || Number.isNaN(decimals)) {
            throw new Error('Decimal precision must be a finite number');
        }
        if (decimals < MIN_DECIMALS) {
            throw new Error(`Decimal precision cannot be less than ${MIN_DECIMALS}`);
        }
        if (decimals > MAX_DECIMALS) {
            throw new Error(`Decimal precision cannot be greater than ${MAX_DECIMALS}`);
        }
    }
    validateString(value) {
        const decimalStr = super.validateString(value);
        // This should always become a valid number
        return this.serializeDecimal(+decimalStr);
    }
    deserialize(value) {
        if (typeof value === 'number') {
            if (Number.isNaN(value) || !Number.isFinite(value)) {
                throw new ValidationException('invalidNumber', 'Number value must be finite');
            }
            // Just convert the numeric value to a string
            return this.serializeDecimal(value);
        }
        if (typeof value === 'string') {
            return super.deserialize(value);
        }
        throw new ValidationException('invalidValue', 'Invalid string or number value');
    }
    serializeDecimal(num) {
        const { decimals } = this;
        if (decimals >= 0) {
            return num.toFixed(decimals);
        }
        const exp = 10 ** -decimals;
        const rounded = Math.round(num / exp) * exp;
        return rounded.toFixed(0);
    }
}
