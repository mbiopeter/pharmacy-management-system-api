import deserializeDateTime from '../datetime/deserializeDateTime.js';
import serializeDateTime from '../datetime/serializeDateTime.js';
import ValidationException from '../errors/ValidationException.js';
function ensureDateTime(value) {
    if (value instanceof Date && !Number.isNaN(value.getTime())) {
        return value;
    }
    throw new ValidationException('invalidDateTime', 'Invalid date/time value');
}
export default class DateTimeField {
    type = 'timestamptz';
    validate(value) {
        return ensureDateTime(value);
    }
    serialize(value) {
        return serializeDateTime(ensureDateTime(value));
    }
    deserialize(value) {
        return ensureDateTime(value instanceof Date ? value : deserializeDateTime(value));
    }
    encode(value) {
        return serializeDateTime(ensureDateTime(value));
    }
    decode(value) {
        return ensureDateTime(deserializeDateTime(value));
    }
}
