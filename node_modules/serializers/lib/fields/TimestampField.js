import deserializeDateTime from '../datetime/deserializeDateTime.js';
import ValidationException from '../errors/ValidationException.js';
import NumberField from './NumberField.js';
export default class TimestampField {
    type = 'timestamptz';
    numberField = new NumberField({});
    validate(value) {
        if (Number.isNaN(value.getTime())) {
            throw new ValidationException('invalidDateTime', 'Invalid date/time value');
        }
        return value;
    }
    serialize(value) {
        return value.getTime();
    }
    deserialize = deserializeDateTime;
    encode(value) {
        return this.serialize(value).toString();
    }
    decode(value) {
        const numeric = +value;
        if (Number.isNaN(numeric)) {
            return this.deserialize(value);
        }
        return new Date(numeric);
    }
}
