import isValidationError from '../errors/isValidationError.js';
/**
 * Makes the given field nullable, allowing null values for it.
 */
export default class NullableField {
    field;
    type;
    constructor(field) {
        this.field = field;
        this.type = field.type;
    }
    validate(value) {
        return nullify(value, this.field, 'validate');
    }
    serialize(value) {
        return nullify(value, this.field, 'serialize');
    }
    deserialize(value) {
        return nullify(value, this.field, 'deserialize');
    }
    encode(value) {
        return nullify(value, this.field, 'encode') ?? '';
    }
    decode(value) {
        return !value ? null : this.field.decode(value);
    }
}
function nullify(value, obj, method) {
    if (value == null) {
        return null;
    }
    if (value !== '') {
        return obj[method](value);
    }
    try {
        return obj[method](value);
    }
    catch (error) {
        if (isValidationError(error) && error.code === 'tooShort') {
            return null;
        }
        throw error;
    }
}
