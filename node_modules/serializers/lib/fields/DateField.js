import deserializeDate from '../datetime/deserializeDate.js';
import serializeDate from '../datetime/serializeDate.js';
import ValidationException from '../errors/ValidationException.js';
function ensureDate(value) {
    if (!(value instanceof Date) || Number.isNaN(value.getTime())) {
        throw new ValidationException('invalidDate', 'Invalid date value');
    }
    if (value.getHours() !== 0 || value.getMinutes() !== 0 || value.getSeconds() !== 0 || value.getMilliseconds() !== 0) {
        return new Date(value.getFullYear(), value.getMonth(), value.getDate());
    }
    return value;
}
export default class DateField {
    type = 'date';
    validate(value) {
        return ensureDate(value);
    }
    serialize(value) {
        return serializeDate(ensureDate(value));
    }
    deserialize(value) {
        return ensureDate(value instanceof Date ? value : deserializeDate(value));
    }
    encode(value) {
        return serializeDate(ensureDate(value));
    }
    decode(value) {
        return ensureDate(deserializeDate(value));
    }
}
