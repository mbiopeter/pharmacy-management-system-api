/* eslint-disable no-restricted-syntax */
import hasOwnProperty from './hasOwnProperty.js';
import isEqual from './isEqual.js';
/**
 * Maps each value for each property of an object to a new value,
 * as returned by the given function that is called for each property.
 * If no property is changed, then the original object reference is returned.
 * @param obj object whose values are mapped
 * @param iterator function that returns new value for each key
 */
function transform(obj, iterator) {
    let isAltered = false;
    let result;
    for (const key in obj) {
        if (hasOwnProperty(obj, key) && typeof key === 'string') {
            const value = obj[key];
            const newValue = iterator(value, key);
            if (result == null) {
                result = {};
            }
            result[key] = newValue;
            if (!isEqual(value, newValue, 0)) {
                isAltered = true;
            }
        }
    }
    return isAltered ? result : obj;
}
export default transform;
//# sourceMappingURL=transform.js.map