export declare type SelectedKeys<T, Condition> = {
    [P in keyof T]: Condition extends T[P] ? P : never;
}[keyof T];
export declare type SelectedValues<T, Condition> = {
    [P in SelectedKeys<T, Condition>]: Extract<T[P], Condition>;
};
/**
 * Pick all the property names from the given object matching the criteria.
 * If every object property matches the criteria, then the object reference is returned.
 * @param obj object whose properties to pick
 * @param fn function returning whether or not a property should be selected
 */
declare function select<T, V extends T[keyof T]>(obj: T, fn: (value: T[keyof T], key: keyof T) => value is V): SelectedValues<T, V>;
declare function select<T, K extends keyof T>(obj: T, fn: (val: T[keyof T], key: keyof T) => key is K): Pick<T, K>;
declare function select<T>(obj: T, fn: (value: any, key: keyof T) => boolean): Partial<T>;
export default select;
